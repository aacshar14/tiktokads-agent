{
  "nodes": [
    {
      "parameters": {},
      "id": "516f91b0-6808-4f15-93aa-ef38319a2a22",
      "name": "When clicking 'Test workflow'",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        0
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, name FROM brands WHERE name = '{{ $json.brand }}' LIMIT 1;",
        "options": {}
      },
      "id": "746d9dff-c9c2-4933-a322-01b4dcd679d9",
      "name": "Get Brand ID",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        224,
        0
      ],
      "credentials": {
        "postgres": {
          "id": "QPYB6wfrfusFTUPj",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "chat",
        "requestOptions": {}
      },
      "id": "715c5c89-cca4-4f76-be3a-532d8c6f6d5c",
      "name": "Generate with OpenAI",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        448,
        0
      ],
      "credentials": {
        "openAiApi": {
          "id": "k6MGLnUrKrv7HoiR",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const aiData = $json || {};\nlet brandData = {};\ntry {\n  const item = $input.all()[0];\n  if (item && item.json) {\n    brandData = item.json;\n  }\n} catch (e) {}\n\nconst brandId = brandData?.id || 1;\nconst brandName = brandData?.name || 'Chiltepik';\n\nlet aiResponse = {};\ntry {\n  if (aiData.message?.content) {\n    aiResponse = JSON.parse(aiData.message.content);\n  } else if (aiData.choices?.[0]?.message?.content) {\n    aiResponse = JSON.parse(aiData.choices[0].message.content);\n  } else if (typeof aiData === 'string') {\n    aiResponse = JSON.parse(aiData);\n  } else if (aiData.campaign) {\n    aiResponse = aiData;\n  } else {\n    aiResponse = aiData;\n  }\n} catch (e) {\n  aiResponse = aiData;\n}\n\nreturn [{\n  json: {\n    brandId: brandId,\n    brandName: brandName,\n    campaign: aiResponse.campaign || {},\n    adGroups: aiResponse.ad_groups || [],\n    fullResponse: aiResponse\n  }\n}];"
      },
      "id": "8fc38aae-52f5-46c8-b677-f266126e3f8a",
      "name": "Process Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        672,
        0
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO campaigns (\n  brand_id, name, objective, daily_budget, locations, \n  languages, age_range, gender, optimization, bidding, status\n)\nVALUES (\n  1,\n  'AI Generated Campaign',\n  'TRAFFIC',\n  250,\n  'Piedras Negras, MX',\n  'es,*',\n  '18-44',\n  'ALL',\n  'CPC',\n  'AUTO',\n  'DRAFT'\n)\nRETURNING id;",
        "options": {}
      },
      "id": "9ba31c6d-defc-4ec0-8554-d7bee1986a2c",
      "name": "Save Campaign",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        880,
        0
      ],
      "credentials": {
        "postgres": {
          "id": "QPYB6wfrfusFTUPj",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO campaigns (\n  brand_id, name, objective, daily_budget, locations, \n  languages, age_range, gender, optimization, bidding, status\n)\nVALUES (\n  1, 'AI Generated Campaign', 'TRAFFIC', 250, \n  'Piedras Negras, MX', 'es,*', '18-44', 'ALL', 'CPC', 'AUTO', 'DRAFT'\n)\nRETURNING id;",
        "options": {}
      },
      "id": "627a9c7c-638b-4e2f-95c8-6b0c2d1e2755",
      "name": "Save Ad Groups",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        1104,
        0
      ],
      "credentials": {
        "postgres": {
          "id": "QPYB6wfrfusFTUPj",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log the generation to database\nconst items = $input.all();\nconst firstItem = items[0].json;\n\nreturn [{\n  json: {\n    brandId: firstItem.brandId,\n    inputPayload: JSON.stringify(firstItem.inputData),\n    outputPayload: JSON.stringify({\n      campaign: firstItem.campaign,\n      adGroups: firstItem.adGroups\n    })\n  }\n}];"
      },
      "id": "1d17a51c-e8dd-4965-ac71-ffce79d1968a",
      "name": "Prepare Log",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1328,
        0
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO generations (brand_id, input_payload, output_payload) \nVALUES (1, '{}'::jsonb, '{}'::jsonb) \nRETURNING id;",
        "options": {}
      },
      "id": "70a5a0f1-85f4-40e0-b72d-de1c291d2869",
      "name": "Log Generation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [
        1552,
        0
      ],
      "credentials": {
        "postgres": {
          "id": "QPYB6wfrfusFTUPj",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Final output\nreturn $input.all().map(item => ({\n  json: {\n    success: true,\n    message: 'TikTok Ads campaign generated and saved successfully!',\n    brand: item.json.brandName,\n    campaign: item.json.campaign\n  }\n}));"
      },
      "id": "dbc5eff4-b95b-4b93-bf40-6ec2ade4e29d",
      "name": "Return Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1760,
        0
      ]
    }
  ],
  "connections": {
    "When clicking 'Test workflow'": {
      "main": [
        [
          {
            "node": "Get Brand ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Brand ID": {
      "main": [
        [
          {
            "node": "Generate with OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate with OpenAI": {
      "main": [
        [
          {
            "node": "Process Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Data": {
      "main": [
        [
          {
            "node": "Save Campaign",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Campaign": {
      "main": [
        [
          {
            "node": "Save Ad Groups",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save Ad Groups": {
      "main": [
        [
          {
            "node": "Prepare Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Log": {
      "main": [
        [
          {
            "node": "Log Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Generation": {
      "main": [
        [
          {
            "node": "Return Result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "32871787df6ce421bc7f43d7ddacd8d876aa2ecf18d853ce488fab3220528d8e"
  }
}

