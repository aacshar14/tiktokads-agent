{
  "name": "TikTok Ads API - Generate Campaign",
  "nodes": [
    {
      "parameters": {},
      "id": "webhook-trigger",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "ads-generate",
      "path": "ads/generate"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "validate-brand",
              "leftValue": "={{ $json.body.brand }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT id, name FROM brands WHERE name = $1 LIMIT 1;",
        "options": {}
      },
      "id": "get-brand",
      "name": "Get Brand ID",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [680, 300],
      "credentials": {
        "postgres": {
          "id": "DgapWprXhXGmXRc1",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-brand-exists",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "isNotEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-brand",
      "name": "Check Brand Exists",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "chat",
        "model": "gpt-4",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an expert TikTok Ads campaign generator. Generate complete campaign structures in JSON format."
            },
            {
              "role": "user",
              "content": "Generate a TikTok Ads campaign for {{ $('Get Brand ID').item.json.name }}. Objective: {{ $('Webhook').item.json.body.objective }}, Daily Budget: {{ $('Webhook').item.json.body.daily_budget_mxn }} MXN, Locations: {{ $('Webhook').item.json.body.locations }}, Age Range: {{ $('Webhook').item.json.body.age_range }}, Gender: {{ $('Webhook').item.json.body.gender }}. Return JSON with campaign, ad_groups (with interests, behaviors, hashtags, ads array with primary_text, cta)."
            }
          ]
        }
      },
      "id": "generate-ai",
      "name": "Generate with OpenAI",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [1120, 300],
      "credentials": {
        "openAiApi": {
          "id": "rEeljXZUbLsUttr6",
          "name": "OpenAI account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process AI response and prepare for database\nconst inputs = $input.all();\nconst webhookData = $('Webhook').first().item.json.body;\nconst brandData = $('Get Brand ID').first().item.json;\nconst aiResponse = $json;\n\n// Parse OpenAI response\nlet aiData = {};\ntry {\n  if (aiResponse.message?.content) {\n    aiData = JSON.parse(aiResponse.message.content);\n  } else if (aiResponse.choices?.[0]?.message?.content) {\n    aiData = JSON.parse(aiResponse.choices[0].message.content);\n  } else {\n    aiData = aiResponse;\n  }\n} catch (e) {\n  aiData = aiResponse;\n}\n\nreturn [{\n  json: {\n    brandId: brandData.id,\n    brandName: brandData.name,\n    inputData: webhookData,\n    campaign: aiData.campaign || {},\n    adGroups: aiData.ad_groups || [],\n    fullResponse: aiData\n  }\n}];"
      },
      "id": "process-data",
      "name": "Process AI Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO campaigns (brand_id, name, objective, daily_budget, locations, languages, age_range, gender, optimization, bidding, status) VALUES (1, 'Test Campaign', 'TRAFFIC', 250, 'Piedras Negras', 'es,*', '18-44', 'ALL', 'CPC', 'AUTO', 'DRAFT') RETURNING id;",
        "options": {}
      },
      "id": "save-campaign",
      "name": "Save Campaign",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [1560, 300],
      "credentials": {
        "postgres": {
          "id": "DgapWprXhXGmXRc1",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Log generation to database\nconst items = $input.all();\nconst firstItem = items[0].json;\n\nreturn [{\n  json: {\n    brandId: firstItem.brandId,\n    inputPayload: JSON.stringify(firstItem.inputData),\n    outputPayload: JSON.stringify(firstItem.fullResponse)\n  }\n}];"
      },
      "id": "prepare-log",
      "name": "Prepare Generation Log",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO generations (brand_id, input_payload, output_payload) VALUES (1, '{\"test\": \"data\"}'::jsonb, '{\"result\": \"ok\"}'::jsonb) RETURNING id;",
        "options": {}
      },
      "id": "log-generation",
      "name": "Log Generation",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2,
      "position": [2000, 300],
      "credentials": {
        "postgres": {
          "id": "DgapWprXhXGmXRc1",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"message\": \"Campaign generated and saved\", \"campaignId\": $json.id } }}"
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": false, \"error\": \"Invalid input: brand is required\" } }}",
        "responseCode": 400
      },
      "id": "error-validation",
      "name": "Error: Invalid Input",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [680, 480]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": false, \"error\": \"Brand not found: \" + $('Webhook').item.json.body.brand } }}",
        "responseCode": 404
      },
      "id": "error-brand-not-found",
      "name": "Error: Brand Not Found",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1120, 480]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [[{ "node": "Validate Input", "type": "main", "index": 0 }]]
    },
    "Validate Input": {
      "main": [[{ "node": "Get Brand ID", "type": "main", "index": 0 }], [{ "node": "Error: Invalid Input", "type": "main", "index": 0 }]]
    },
    "Get Brand ID": {
      "main": [[{ "node": "Check Brand Exists", "type": "main", "index": 0 }]]
    },
    "Check Brand Exists": {
      "main": [[{ "node": "Generate with OpenAI", "type": "main", "index": 0 }], [{ "node": "Error: Brand Not Found", "type": "main", "index": 0 }]]
    },
    "Generate with OpenAI": {
      "main": [[{ "node": "Process AI Response", "type": "main", "index": 0 }]]
    },
    "Process AI Response": {
      "main": [[{ "node": "Save Campaign", "type": "main", "index": 0 }]]
    },
    "Save Campaign": {
      "main": [[{ "node": "Prepare Generation Log", "type": "main", "index": 0 }]]
    },
    "Prepare Generation Log": {
      "main": [[{ "node": "Log Generation", "type": "main", "index": 0 }]]
    },
    "Log Generation": {
      "main": [[{ "node": "Success Response", "type": "main", "index": 0 }]]
    }
  }
}

